{"basic_builder": {"appname": "TA-bitsight-findings", "friendly_name": "BitSight Findings", "version": "1.0.0", "author": "morethanyell", "description": "Performs full-pull from the Ratings-Company-Findings API endpoint of BitSight", "theme": "#05a0d3", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAABMtJREFUWEftlnlQlVUYh5/zcRfWWEVAXMk0SXFyq2jU0gzXlEIGlRltNMZMK7dpUARzm0lTU8fJQXPBpbREA9IxU9FcJkADZMsFBFxAEK94QbjL19yvkUJvXWcuzfAH58/vvOd3nvN73/OdV9DKhmhlPLQB2cpIm0NtDtlywNZ8660hWZa1wExZlqcIIXoBTrZOY8+8LMu1Qogis9m8V5KkzUKIBoue4pAsy4GyLKcIIfras4kda3OBUUKIcmFxRpblDCFEbzsE7V4qy3KuEGKABegTYJ3dii0gYDab51qAMoD+LaDXEhKZFqC6/7uAn5VUluVHFiA5tVhHaokOD40Dzo4OxL3sx/T0UsI7u3OivJbC2kaCXNQ4qySm+BhZuGontytrGDwwmEnjB7NxRyq718/lj+JbrNmSzO/5xThIEks+jiT/ShmuLo7ETA5TuIZNiiN2VgRL1+9txjl76lgiRoeiAH1TUK3AhAd5EHmylC/6+xGdXsbpMUHKovBfbrBpUAABrmqmzd/A8139WTQrghrdQ2Xz+LV7OLglliETY5k74x2mTBiK0WjCZDKzYtMB3N2cif0oQtHqGjqDw9sW07lDO3b9cILfsq+w6fMYHLVqtBr130AXq+pp56rmgd7AmtBAhqRdswq09dtjrE08zPSoEUx9bxjZBX8BxUweSdLBkxzdlUBJeSWFV8vx8XqOA2lnySksYUBIdwVo+/7jHNmVwEsvdCJx3zHOZRWyfc2cJreaHJJleKW9M/EXK1jez48Pzt20CmRZmZ1fzIYdqVwuusGyeZNZvvE7pk18i/2pv3JkZ7xyaksaLQ519Pehsuo+498epGw6Oz6Rn3bG2wZ6nLIlWXcY4OXE6rwqq0ClN+/Swd+bqyW3eTNqMZuXxfBl4iF2r5/HkMhYViyIJnJMKPvTzpJyPEMBejJlKdvj/hso+dp90m7oaO+oQlJJxPXzY+aZMrYN7aScasGFWyzo44uvs4pFq3dz9FQWWq2GGVEj6NW9Y1NRn79YxLqthykuq0CjUfHuyNeQzfJTRf31yg/p3sVfSeelvOusXBjdLGVWr312jZGoMzrCAjRcqDJwLszL6u0VSRX8+IYHsZcekjvW+1lvuNW4x9fe6o8x8rSOwgdGPgt2oc4ko5UEpXoTjWaZhBBXkksbyK4xsDRHT944b9LvNOLn5ECBzqjEzOnpTHqFQYmxjOhuTiRdr6e9o8TMHs7/Bp4pTCbTp5IkrX0yYnNRHefvGhjur2HLlXrc1YKwAC2HyhoY1UHDyst6xZFuyVXse92dhBw9fT1VvOiuIuuegUE+alZd1pM5ypuQ1GreD3Ii976Rra8+R5Cbg1Wgx0+H1cfVGtDYQC0p5Q0Ee6hIuv6IrNFeTwH18VSRU2Okp7tKASoN98Hv+7sUjPPhVEUj87NqqYn0fQqo6XG1zFhrPzKqDZTrzXRzcyCz2qCkrIe7A0U6E709Vcq3Mr1JEZ7YxbEpZb5OEpX1ZgJdJCX2aq2R1fl1HBvuyc+3GgjxVDOhk6X1ajYs7cdoIURZU8f4zwYNCBZCONpVocBXBXVk3jPgoZbYONCtmZylgIE8IcQeoHmDZu/GLbm+9fbULXlKe7TaHLLlXptDbQ7ZcsDW/J9vLUB1Rd0y/wAAAABJRU5ErkJggg==", "visible": true, "tab_version": "4.2.0", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "bitsight:findings", "interval": "3600", "use_external_validation": true, "streaming_mode_xml": true, "name": "bitsight_findings", "title": "BitSight Findings", "description": "", "type": "customized", "parameters": [{"name": "company_guid", "label": "Company GUID", "help_string": "IMPORTANT: Use * for all visible companies, or enter the exact GUID of your desired company.", "required": true, "format_type": "text", "default_value": "*", "placeholder": "*", "type": "text", "value": "asdfsdgdsg"}, {"name": "api_url", "label": "API URL", "help_string": "", "required": false, "format_type": "text", "default_value": "https://api.bitsighttech.com/", "placeholder": "", "type": "text", "value": "https://api.bitsighttech.com/"}, {"name": "api_token", "label": "API Token", "help_string": "", "required": true, "format_type": "password", "default_value": "", "placeholder": "", "type": "password", "value": "a5748227a401e2afac7d27995a1a9649a75613e0"}, {"name": "impacts_risk_vector_grade", "label": "Impacts Risk Vector Grade", "help_string": "", "required": true, "possible_values": [{"value": "AFFECTS_RATING", "label": "Yes"}, {"value": "LIFETIME_EXPIRED", "label": "No"}], "format_type": "dropdownlist", "default_value": "AFFECTS_RATING", "placeholder": "", "type": "dropdownlist", "value": "AFFECTS_RATING"}, {"name": "finding_severity", "label": "Finding Severity", "help_string": "", "required": true, "possible_values": [{"value": "severe", "label": "Severe"}, {"value": "material", "label": "Material"}, {"value": "moderate", "label": "Moderate"}, {"label": "Minor", "value": "minor"}], "format_type": "multi_dropdownlist", "default_value": ["severe", "material"], "placeholder": "", "type": "multi_dropdownlist", "value": ["severe"]}], "data_inputs_options": [{"type": "customized_var", "name": "company_guid", "title": "Company GUID", "description": "IMPORTANT: Use * for all visible companies, or enter the exact GUID of your desired company.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "*", "placeholder": "*"}, {"type": "customized_var", "name": "api_url", "title": "API URL", "description": "", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "https://api.bitsighttech.com/", "placeholder": ""}, {"type": "customized_var", "name": "api_token", "title": "API Token", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "impacts_risk_vector_grade", "title": "Impacts Risk Vector Grade", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "AFFECTS_RATING", "label": "Yes"}, {"value": "LIFETIME_EXPIRED", "label": "No"}], "format_type": "dropdownlist", "default_value": "AFFECTS_RATING", "placeholder": ""}, {"type": "customized_var", "name": "finding_severity", "title": "Finding Severity", "description": "", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "severe", "label": "Severe"}, {"value": "material", "label": "Material"}, {"value": "moderate", "label": "Moderate"}, {"label": "Minor", "value": "minor"}], "format_type": "multi_dropdownlist", "default_value": ["severe", "material"], "placeholder": ""}], "code": "\n# encoding = utf-8\n\nimport json\nimport requests\nimport time\nimport uuid\nfrom requests.auth import HTTPBasicAuth\n'''\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n'''\n'''\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n'''\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # company_guid = definition.parameters.get('company_guid', None)\n    # impacts_risk_vector_grade = definition.parameters.get('impacts_risk_vector_grade', None)\n    # severity_category = definition.parameters.get('severity_category', None)\n    # api_token = definition.parameters.get('api_token', None)\n    # api_url = definition.parameters.get('api_url', None)\n    pass\n\ndef get_companies(helper, token, filter_company):\n    \n    api_url = f'https://api.bitsighttech.com/v1/companies'\n    \n    helper.log_info(f'Querying BitSight Companies API now...')\n    helper.log_info(f'GET {api_url}')\n    \n    response = requests.get(api_url, auth=HTTPBasicAuth(token, \"\"))\n    \n    all_companies = []\n    filtered_companies = []\n    retry_count = 0\n    \n    if response.status_code == 200:\n    \n        data = response.json()\n        \n        all_companies.extend(data.get(\"companies\", []))\n    else:\n        helper.log_error(f\"Failed to retrieve Companies data. Status code: {response.status_code}\")\n        filtered_companies = None    \n    \n    if filter_company == \"*\":\n        filtered_companies = all_companies\n    else:\n        if company_exists(all_companies, filter_company):\n            \n            filtered_company = next((c for c in all_companies if c[\"guid\"] == filter_company), None)\n            filtered_companies.append(filtered_company)\n    \n    return filtered_companies\n\ndef company_exists(companies, search_val):\n    for c in companies:\n        if c.get('guid') == search_val:\n            return True\n    return False\n\ndef get_findings(helper, init_url, company_guid, token, irvd, sevcat):\n    init_url = init_url.rstrip('/')\n    api_url = f'{init_url}/ratings/v1/companies/{company_guid}/findings'\n    api_url = api_url + f'?impacts_risk_vector_details={irvd}'\n    api_url = api_url + f'&severity_category={sevcat}'\n    \n    helper.log_info(f'Querying BitSight Findings API now. company={company_guid} | irvd={irvd} | sevparam={sevcat}')\n    helper.log_info(f'GET {api_url}')\n    \n    all_results = []\n    \n    url = api_url\n    \n    page = 1\n    max_retries = 10\n    retry_count = 0\n\n    while url and retry_count < max_retries:\n        # Make the GET request with basic authentication\n        response = requests.get(url, auth=HTTPBasicAuth(token, \"\"))\n        \n        # Check if the request was successful\n        if response.status_code == 200:\n            # Parse the JSON response\n            data = response.json()\n            \n            # Collect the results\n            all_results.extend(data.get(\"results\", []))\n            \n            # Get the next URL from the links\n            url = data.get(\"links\", {}).get(\"next\")\n            \n            retry_count = 0\n        elif response.status_code > 499:\n            retry_count += 1\n            if retry_count < max_retries:\n                # Sleep for 10 seconds and then retry the request\n                helper.log_warning(f\"API query failed due to 5xx error (BitSight Server was unresponsive). Will retry for a maximum of 10x. {response.status_code}\")\n                time.sleep(10)\n            else:\n                helper.log_error(f\"Failed after {max_retries} retries. Status code: {response.status_code}\")\n                break\n        else:\n            helper.log_error(f\"Failed to Findings retrieve data. Status code: {response.status_code}\")\n            break\n    \n        page = page + 1\n    \n    helper.log_info(f'API ran {str(page)} times due to pagination.')\n    \n    return all_results\n\ndef collect_events(helper, ew):\n    \n    stanzaname = helper.get_input_stanza_names()\n    init_company_guid = helper.get_arg('company_guid')\n    opt_impacts_risk_vector_grade = helper.get_arg('impacts_risk_vector_grade')\n    opt_api_token = helper.get_arg('api_token')\n    opt_api_url = helper.get_arg('api_url')\n\n    sev_param = ','.join(helper.get_arg('finding_severity'))\n    _splunkSkedInputId = str(uuid.uuid4())\n    \n    helper.log_info(f'Start of collection. stanza={stanzaname}')\n    helper.log_info(f'This sked-collection\\'s interval ID is {_splunkSkedInputId}')\n    \n    if init_company_guid == \"*\":\n        company_guid = \"all\"\n        helper.log_info(f'Collection method is set to retrieve all companies allowed for the token provided.')\n    else:\n        company_guid = init_company_guid\n        helper.log_info(f'Collection method is set to retrieve data from one specific company.')\n    \n    companies = get_companies(helper, opt_api_token, init_company_guid)\n    \n    if companies is None or len(companies)==0:\n        helper.log_info(f'The BitSight API was successful but did not return any Company or guid=\"{company_guid}\". This input/collection ends here.')\n        return\n    \n    meta_source = f'bitsight_companies://{stanzaname}'\n    helper.log_info(f'Writing Companies meta...')\n    \n    ev = 0\n    \n    for c in companies:\n        c['_splunkSkedInputId'] = _splunkSkedInputId\n        # Indexing Companies as separate sourcetype first\n        data = json.dumps(c, separators=(',', ':'))\n        event = helper.new_event(source=meta_source, index=helper.get_output_index(), sourcetype='bitsight:companies', data=data)\n        ew.write_event(event)\n        ev = ev + 1\n        \n        # Now querying the API for each company\n        \n        companyDetails = {\n            \"guid\": c['guid'],\n            \"name\": c['name'],\n            \"shortname\": c['shortname'],\n            \"rating\": c['rating'],\n            \"rating_date\": c['rating_date'],\n        }\n        \n        company_guid_api = companyDetails['guid']\n        \n        findings = get_findings(helper, opt_api_url, company_guid_api, opt_api_token, opt_impacts_risk_vector_grade, sev_param)\n        \n        if findings is None or len(findings)==0:\n            helper.log_info('The BitSight API was successful but did not return any findings for company_guid=\"{company_guid_api}\". Onto the next company...')\n            continue\n        \n        helper.log_info(f'A total of {len(findings)} findings retrieved for company {company_guid_api}. Writing findings events...')\n        \n        meta_source = f'bitsight_findings://{stanzaname}'\n        \n        for f in findings:\n            \n            f['companyDetails'] = companyDetails\n            f['_splunkSkedInputId'] = _splunkSkedInputId\n            \n            data = json.dumps(f, separators=(',', ':'))\n            \n            event = helper.new_event(source=meta_source, index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n            ew.write_event(event)\n            ev = ev + 1\n    \n    helper.log_info(f'Total events: {ev}')\n    helper.log_info(f'Collection ends here. Reaching this part means a successful collection.')\n    \n    \n    \n    \n    \n    ", "customized_options": [{"name": "company_guid", "value": "asdfsdgdsg"}, {"name": "api_url", "value": "https://api.bitsighttech.com/"}, {"name": "impacts_risk_vector_grade", "value": "AFFECTS_RATING"}, {"name": "finding_severity", "value": ["severe"]}], "uuid": "ba3d6f97586f45029d79c989fa2aa6c7", "sample_count": "12066"}]}, "field_extraction_builder": {"bitsight:findings": {"data_format": "unstructured_data"}, "bitsight:companies": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {}}}, "sourcetype_builder": {"bitsight:findings": {"metadata": {"data_input_name": "bitsight_findings"}}, "bitsight:companies": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}}, "validation": {"validators": ["best_practice_validation", "data_model_mapping_validation", "field_extract_validation", "app_cert_validation"], "status": "job_started", "validation_id": "v_1720811922_16"}}